#+TITLE: Emacs configuration

** Install missing packages

#+BEGIN_SRC emacs-lisp
  (require 'package)


  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))

  ; Initialize the package system
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))


  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)


    (use-package quelpa
      :ensure t)
    (use-package tree-sitter-langs
      :ensure t)
    (use-package tree-sitter
      :ensure t)
    (use-package python-mode
      :ensure t)
    (use-package haskell-mode
      :ensure t)
    (use-package clojure-mode
      :ensure t)
    (use-package cider
      :ensure t)
    (use-package yasnippet-snippets
      :ensure t)
    (use-package rust-mode
      :ensure t)
    (use-package plantuml-mode
      :ensure t)
    (use-package simple-httpd
      :ensure t)
    (use-package magit
      :ensure t)
    (use-package org-ref-prettify
      :ensure t)
    (use-package org-ref
      :ensure t)
    (use-package verilog-mode
      :ensure t)
    (use-package gnu-elpa-keyring-update
      :ensure t)
    (use-package slime
      :ensure t)
    (use-package nord-theme
      :ensure t)
    (use-package modern-cpp-font-lock
      :ensure t)
 
#+END_SRC



** General configurations

#+BEGIN_SRC emacs-lisp
  (load-theme 'nord t)
  '(indent-tabs-mode nil)
  '(menu-bar-mode t)
  '(tab-always-indent t)
  '(tool-bar-mode t)

  (when (version<= "26.0.50" emacs-version)
    (global-display-line-numbers-mode))
  ;; Backup directory-file-name
  (setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
   '(("." . "~/.emacs.d/backups/"))    ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)       ; use versioned backups
#+END_SRC

** Org Roam Configuration

#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/.emacs.d/org-notes")
    (org-roam-completion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i"    . completion-at-point))
    :config
    (org-roam-setup))
#+END_SRC 

** CTags configuration
#+BEGIN_SRC emacs-lisp
  (setq path-to-ctags "/usr/local/bin/ctags")
  (setq path-to-ctags-out-file "~/.emacs.d/Tags/TAGS")

  (defun create-tags (dir-name)
    "Create tags file."
    (interactive "DDirectory: ")
    (shell-command 
     (format "%s -f %s -e -R %s" path-to-ctags path-to-ctags-out-file (directory-file-name dir-name))))

#+END_SRC

** Yasnippet configuration
#+BEGIN_SRC emacs-lisp
  (require 'yasnippet)
  (yas-global-mode 1)
#+END_SRC

** RSS feed configuration

#+begin_src emacs-lisp
  (setq elfeed-feeds
      '(("https://feeds.arstechnica.com/arstechnica/index" arstechnica)
        ("https://rss.sciencedirect.com/publication/science/23527110" softwareX)
        ))
  (setf url-queue-timeout 30)
#+end_src

** Autocomplete

#+begin_src emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)
      ))  
#+end_src

** Programming Languages

*** C/C++ Configurations
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq tab-width 4)
  (setq c-default-style "bsd"
        c-basic-offset 4)

#+end_src

*** Plantuml mode

#+begin_src emacs-lisp
  (setq org-plantuml-jar-path (expand-file-name "~/.emacs.d/plantuml.jar"))
  (with-eval-after-load 'org
    (org-babel-do-load-languages 'org-babel-load-languages '((ruby . t)
                                                             (plantuml . t)
                                                             )))
  (add-hook 'org-babel-after-execute-hook
            (lambda ()
              (when org-inline-image-overlays
                (org-redisplay-inline-images))))
#+end_src

*** Rust mode
#+begin_src emacs-lisp
  (add-hook 'rust-mode-hook
            (lambda () (setq indent-tabs-mode nil)))
#+end_src

*** Haskell Configurations
#+begin_src emacs-lisp
  ;;haskell-mode
  (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)

  ;; hslint on the command line only likes this indentation mode;
  ;; alternatives commented out below.
  (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
  ;;(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
  ;;(add-hook 'haskell-mode-hook 'turn-on-haskell-simple-indent)

  ;; Ignore compiled Haskell files in filename completions
  (add-to-list 'completion-ignored-extensions ".hi")
#+end_src


*** Latex mode

#+begin_src emacs-lisp
  (setq-default TeX-engine 'xetex)
  (setq-default TeX-PDF-mode t)
   (add-hook 'TeX-mode-hook 'prettify-symbols-mode)
    (add-hook 'TeX-mode-hook 'TeX-fold-mode)
#+end_src



*** SBCL Configuration

#+BEGIN_SRC emacs-lisp
  ;;; The SBCL binary and command-line arguments
  (setq inferior-lisp-program "/usr/bin/sbcl --noinform")
  (require 'slime)
  (slime-setup)
#+END_SRC
